Encapsulation: Protecting Internal State
Private: Restricts access to the class, ensuring that data cannot be altered directly from outside the class.

Protected: Allows access to the class and its subclasses, enabling inherited classes to use and extend the data and methods.

Public: Exposes data and methods to any application part, allowing wider access.

Abstraction: Simplifying Complexity
Abstract Classes: Define a common code base with some standard methods that include implementation details and some abstract methods without implementation.

Interfaces: Define a contract specifying what methods a class must implement without providing details.

PRACTICE QUIZ:
1. What are the fundamental components of Object-Oriented Programming (OOP)?
    Objects and Classes

2. What is a class in Object-Oriented Programming (OOP)?
    A blueprint or template that defines shared characteristics and behaviours for a group of entities

3. How does encapsulation protect the internal state of an object in OOP?
    By bundling methods and data into a class and restrcting access to some components

Key Benefits of Inheritance 
    Code reusability: Derived classes can use the existing code of the base class without rewriting it.

    Extended functionality: Developers can add new methods or modify existing ones in the derived classes without affecting the base class.

By Using Polymorphism, Developers Can

    Extend the base class by adding methods and attributes.

    Override methods to create specific behaviors for different objects.

    Promote code reuse without sacrificing flexibility.

PRACTICE QUIZ:
1. What is the primary purpose of inheritance in object-oriented programming (OOP)?
    To allow new classes to reuse or extend the functionality of existing classes

2. How does polymorphism benefit developers in object-oriented programming?
    By allowing a single method name to perform different tasks based on the object it acts on

3. How do inheritance and polymorphism work together in OOP?
    Inheritance provides a base structure for a class, while polymorphism allows those classes to have different behaviors

PRACTICE QUIZ:
1. Which of the following best describes creating a derived class in C#?
    Use an access modifier followed by the class name and a colon, then the base class name

2. How do developers use polymorphism through method overriding in C#?
    By creating a virtual method in the base class and overriding it in the derived classes

3. Which scenario demonstrates both inheritance and polymorphism in a C# program?
    A base class Instrument has a virtual melhod Play(), and a derived class Piano overrides the Play() method to provide specidif implementation

Categories of Design Patterns
Design patterns are generally grouped into three main categories:

1. Creational Patterns: focus on object creation mechanisms, providing solutions that enhance flexibility and reuse of code.

Singleton pattern: This pattern ensures that a class has only one instance and provides a global point of access to that instance. It is useful for managing shared resources, such as a single database connection in an application.

Factory pattern encapsulates the object creation process in a separate factory class or method. It allows developers to create objects without specifying the exact class of object that will be created, thereby supporting flexibility and scalability.

2. Structural patterns: deal with the composition of classes or objects, focusing on how objects are interconnected to form larger structures.

Adapter pattern: This pattern allows incompatible interfaces to work together. It involves creating an adapter class that serves as a bridge between two incompatible classes, enabling them to communicate and function cohesively within the application.

3. Behavioral patterns: define how objects interact and communicate with each other, focusing on assigning responsibilities between objects.

Observer pattern: A design pattern in which one object (the subject) notifies a list of observer objects about changes in its state. This is particularly useful in scenarios like a user interface that needs to update automatically when the underlying data changes.

PRACTICE ASSIGNMENT:

1. Why are design patterns important in Object-Oriented Programming (OOP)?
    Designt patterns provide resusable solutions to common problems

2. Which of the following best describes the Singleton design pattern?
    A pattern that ensures a class has only one instance and provides a global access point to that instance

3. Which design pattern should be used when you want to create objects without exposing the instantiation logic to the client?
    Factory Pattern

PRACTICE ASSIGNMENT:

1. What is the primary purpose of a class in C#?
    To serve as a blueprint for creating objects

2. Which of the following correctly demonstrates object instantiation in C#?
    Person neighbor = new Person("John Doe", 30);

3. What is the purpose of a constructor in a C# class?
    To initialize the properties of an object when it is created

4. How can you access a public property of an instantiated object in C#?
    Using dot notation, like objectName.propertyName

GRADED QUIZ:

1. What is the relationship between classes and objects in OOP?
    A class is a blueprint, and objects are instances of that class

2. What is the difference between inheritance and polymorphism in OOP?
    Inheritance allows classes to share attributes, while polymorphism allows methods to have different behaviors depending on the object

3. Which feature of polymorphism is commonly used in C#?
    Method overriding to provide different implementations in derived classes

4. What problem does the Singleton design pattern solve?
    It ensures that a class has only one instance throughout the program

5. What is the role of a constructor in object creation?
    It initializes the properties of an object when it is initialized

6. How does encapsulation help in securing data in OOP?
    By restrcting direct access to object properties and exposing them through methods

7. Why would a developer use method overriding in C#?
    To change the behavior of a method in a derived class without affecting the base class

8. How does a constructor differ from other methods in a C# class?
    It is called automatically when an object is created, and it initializes the object's properties

9. How does an interface differ from a class in C#?
    An interface defines method signatures without implementation, while a class can provide full method implementation

10. What is a key benefit of using abstraction in object-oriented programming?
    It simplifies complex systems by hiding their internal workings and exposing only necessary parts