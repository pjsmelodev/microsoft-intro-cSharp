ASYNCHRONOUS PROGRAMMING:

    I/O operations
    network requests
    improving application responsiveness
    dealing with back-end services

Challenges of Asynchronous Programming
While beneficial, asynchronous programming presents challenges, especially in managing concurrency and debugging.

Concurrency management: Handling multiple tasks without causing conflicts can be complex, particularly when tasks depend on each other.

Debugging difficulties: Asynchronous operations can make it harder to trace errors, as tasks run independently of the main flow.

Code readability: With many operations running concurrently, keeping track of what happens when can complicate code maintenance.

PRACTICE QUIZ:

1. What is a key feature of asynchronous programming?
    Tasks run independently of the main program flow

2. Which of the following is a challenge associated with asynchronous programming?
    Managing cuncurrency in code

3. How does asynchronous programming handle tasks compared to synchronous programming?
    Asynchronous programming allows tasks to run in parallel without blocking others, while synchronous programming runs tasks one at the time

PRACTICE QUIZ:

1. What is the purpose of the async keyword in C#?
    It allows a method to execute without blocking the main thread

2. Which of the following statements about await in C# is correct?
    It pauses method execution until the awaited task is complete

3. What is the correct way to call an asynchronous method using await in C#?
    async Task CallMethodAsynch() {
        await SomeAsyncMethod();
    }

PRACTICAL ASYNCHRONOUS SOLUTIONS:
    Handling multiple API calls
    Handle responses efficiently
    Processing large datasets -> async libraries
    Async methods that don't black the UI
    Max system resouces

PRACTICE QUIZ:

1. How can asynchronous programming improve application responsiveness?
    By using methods that don't block the UI

2. What is the key benefit of using asynchronous programming to simultaneously fetch product data and reviews?
    It improves the application's efficiency by performing both tasks at the same time

3. What is the main purpose of using asynchronous programming in practical applications?
    Asynchronous programming helps keep applications responsive by freeing up the main thread to handle other tasks while waiting for long-running operations

PRACTICE QUIZ:

1. How does asynchronous programming improve modern software development?
    By allowing multiple tasks to run without blocking the main application

2. Which of the following is an industry example where asynchronous programming improved performance?
    HH.AI's use of asynchronous programming to fetch patient date and health records simultaneously

3. Why is asynchronous programming essential in modern applications?
    It improves scalability and reliability by handling multiple tasks without blocking the main application

CHALLENGES WITH ASYNC
    Non-linear execution makes it herder to trace tasks

    Errors may not be immediately apparent leading to silent failures

    Cuncurrency issues
        Tasks that run at the same time can cause race conditions

        Code runs in a different order changing how bugs occur

DEBUGGING
    User debbuger extension

    Use the Task Explorer extension

    Use Logpoints -> envia informação para o terminal enquanto a app corre
        Logs variable values and messages to the console

        Get information from asynchronous tasks while they're running
    
    Use the call stack tool to track the sequence of method calls

PRACTICE ASSIGNMENT:
1. Which of the following describes a key challenge when debugging asynchronous code?
    Non-linear execution makes it harder to trace tasks

2. What debugging technique allows you to inspect the program's state while paused?
    Breakpoints

3. What is the most effective way to debug asynchronous code in C# using breakpoints?
    Set a breakpoint before every await keyword to see what the code does before suspending execution

GRADED QUIZ:
1. What is asynchronous programming?
    A technique that allows tasks to run independently from the main program flow

2. How does the await keyword work with async in C#?
    It pauses the method execution untill the awaited tasks completes

3. How does asynchronous programming improve application performance?
    By allowing to run tasks concurrently without blocking the main thread

4. What happens if one of the tasks in Task.WhenAll fails?
    The method awaits for other tasks to complete, but failure must be handled

5. How can you prevent errors from crashing an application during asynchronous execution?
    Implement proper error handling like try-catch blocks

6. How can asynchronous programming help with file processing in a C# program?
    It allows file operations tobe habdled in the background while the application ramins responsive

7. How does Task.Delay help in testing asynchronous code?
    It simulates delays in a task to test how the program habdles long-running operations

8. How can you identify if an asynchronous task failed during execution?
    By checking the task's status or catching an excepetion in a try-catch block

9. What advantage does Task.WhenAll provide when running multiple asynchronous tasks?
    It allows tasks to run concurrently and waits for all of them to finish

10. How does the Task Explorer extension assist with debugging asynchronous tasks?
    It helps inspect and monitor the status of running tasks